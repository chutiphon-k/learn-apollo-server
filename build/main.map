{"version":3,"sources":["webpack:///webpack/bootstrap 32878ef6f2da98a7c31f","webpack:///./src/index.js","webpack:///external \"apollo-client-preset\"","webpack:///external \"apollo-link-batch-http\"","webpack:///external \"node-fetch\"","webpack:///external \"graphql-tag\""],"names":["client","link","uri","cache","x","query","z","y","Promise","all","then","data","console","log","JSON","stringify"],"mappings":";;;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AC7DA;AACA;AACA;AACA;;AAEA,MAAMA,SAAS,IAAI,4DAAJ,CAAiB;AAC9B;AACAC,QAAM,IAAI,qEAAJ,CAAkB,EAAEC,KAAK,+BAAP,EAAlB,CAFwB;AAG9BC,SAAO,IAAI,mEAAJ;AAHuB,CAAjB,CAAf;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,IAAIJ,OAAOK,KAAP,CAAa;AACrBA,SAAO,mDAAI;;;;;;;AADU,CAAb,CAAV;;AAUA,MAAMC,IAAIN,OAAOK,KAAP,CAAa;AACrBA,SAAO,mDAAI;;;;;;;AADU,CAAb,CAAV;;AAUA,MAAME,IAAIC,QAAQC,GAAR,CAAY,CAACL,CAAD,EAAIA,CAAJ,EAAOE,CAAP,CAAZ,CAAV;;AAEAC,EAAEG,IAAF,CAAOC,QAAQ;AACbC,UAAQC,GAAR,CAAYC,KAAKC,SAAL,CAAeJ,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAZ;AACD,CAFD;;AAIA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,M;;;;;;ACjHA,iD;;;;;;ACAA,mD;;;;;;ACAA,uC;;;;;;ACAA,wC","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 32878ef6f2da98a7c31f","import  ApolloClient, { HttpLink, InMemoryCache } from 'apollo-client-preset'\nimport { BatchHttpLink } from \"apollo-link-batch-http\";\nimport fetch from 'node-fetch';\nimport gql from 'graphql-tag'\n\nconst client = new ApolloClient({\n  // link: new HttpLink({ uri: 'http://localhost:4000/graphql', fetch }),\n  link: new BatchHttpLink({ uri: 'http://localhost:4000/graphql' }),\n  cache: new InMemoryCache(),\n})\n\n// client.query({\n//   query: gql`\n//     query TodoApp {\n//       photos {\n//         id\n//         credit {\n//           id\n//         }\n//       }\n//     }\n//   `,\n// })\n//   .then(data => console.log(JSON.stringify(data, null, 2)))\n//   .catch(error => console.error(error));\nconst x = client.query({\n  query: gql`\n    query TodoApp {\n      photos {\n        id\n      }\n    }\n  `,\n})\n\nconst z = client.query({\n  query: gql`\n    query TodoApp2 {\n      photos2 {\n        id\n      }\n    }\n  `,\n})\n\nconst y = Promise.all([x, x, z])\n\ny.then(data => {\n  console.log(JSON.stringify(data, null, 2))\n})\n\n// import express from 'express'\n// import bodyParser from 'body-parser'\n// import { graphqlExpress, graphiqlExpress, ExpressGraphQLOptionsFunction } from 'apollo-server-express';\n// import { makeExecutableSchema } from 'graphql-tools'\n\n// import resolvers from './schema/resolvers'\n// import typeDefs from './schema/typeDefs'\n\n// // Some fake data\n\n// // The GraphQL schema in string form\n// // const typeDefs = `\n// //   type Book { title: String, author: String, a: String }\n// //   type RootQuery { books(b: Int!): [Book] }\n\n// //   schema {\n// //     query: RootQuery\n// //   }\n// // `;\n\n// // The resolvers\n// // const resolvers = {\n// //   RootQuery: {\n// //     books(obj, args, context) {\n// //       console.log('====================================');\n// //       console.log('obj', obj);\n// //       console.log('args', args);\n// //       console.log('context', context);\n// //       console.log('====================================');\n// //       return books\n// //     }\n// //   },\n// // };\n\n// console.log('====================================');\n// console.log(typeDefs);\n// console.log('====================================');\n\n// // Put together a schema\n// const schema = makeExecutableSchema({\n//   typeDefs,\n//   resolvers,\n//   logger: { log: (e) => console.log(e ) }\n// });\n\n// // Initialize the app\n// const app = express();\n\n// app.use((req, res, next) => {\n//   req.user = { _id: 100  }\n//   next()\n// })\n\n// // The GraphQL endpoint\n// app.use('/graphql', bodyParser.json(), graphqlExpress(req => ({ schema, context: req })));\n\n// // GraphiQL, a visual editor for queries\n// app.use('/graphiql', graphiqlExpress({ endpointURL: '/graphql' }));\n\n// // Start the server\n// app.listen(3000, () => {\n//   console.log('Go to http://localhost:3000/graphiql to run queries!');\n// });\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","module.exports = require(\"apollo-client-preset\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"apollo-client-preset\"\n// module id = 2\n// module chunks = 0","module.exports = require(\"apollo-link-batch-http\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"apollo-link-batch-http\"\n// module id = 3\n// module chunks = 0","module.exports = require(\"node-fetch\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"node-fetch\"\n// module id = 4\n// module chunks = 0","module.exports = require(\"graphql-tag\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"graphql-tag\"\n// module id = 5\n// module chunks = 0"],"sourceRoot":""}