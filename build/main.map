{"version":3,"sources":["webpack:///webpack/bootstrap f9708b7bc4e7f1342cbe","webpack:///./src/index.js","webpack:///external \"express\"","webpack:///external \"body-parser\"","webpack:///external \"apollo-server-express\"","webpack:///external \"graphql-tools\""],"names":["books","title","author","typeDefs","resolvers","Query","schema","makeExecutableSchema","app","express","use","bodyParser","json","graphqlExpress","graphiqlExpress","endpointURL","listen","console","log"],"mappings":";;;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AC7DA;AACA;AACA;AACA;;AAEA;AACA,MAAMA,QAAQ,CACZ;AACEC,SAAO,uCADT;AAEEC,UAAQ;AAFV,CADY,EAKZ;AACED,SAAO,eADT;AAEEC,UAAQ;AAFV,CALY,CAAd;;AAWA;AACA,MAAMC,WAAY;;;CAAlB;;AAKA;AACA,MAAMC,YAAY;AAChBC,SAAO,EAAEL,OAAO,MAAMA,KAAf;AADS,CAAlB;;AAIA;AACA,MAAMM,SAAS,2EAAAC,CAAqB;AAClCJ,UADkC;AAElCC;AAFkC,CAArB,CAAf;;AAKA;AACA,MAAMI,MAAM,+CAAAC,EAAZ;;AAEA;AACAD,IAAIE,GAAJ,CAAQ,UAAR,EAAoB,mDAAAC,CAAWC,IAAX,EAApB,EAAuC,6EAAAC,CAAe,EAAEP,MAAF,EAAf,CAAvC;;AAEA;AACAE,IAAIE,GAAJ,CAAQ,WAAR,EAAqB,8EAAAI,CAAgB,EAAEC,aAAa,UAAf,EAAhB,CAArB;;AAEA;AACAP,IAAIQ,MAAJ,CAAW,IAAX,EAAiB,MAAM;AACrBC,UAAQC,GAAR,CAAY,sDAAZ;AACD,CAFD,E;;;;;;AC5CA,oC;;;;;;ACAA,wC;;;;;;ACAA,kD;;;;;;ACAA,0C","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f9708b7bc4e7f1342cbe","import express from 'express'\nimport bodyParser from 'body-parser'\nimport { graphqlExpress, graphiqlExpress } from 'apollo-server-express';\nimport { makeExecutableSchema } from 'graphql-tools'\n\n// Some fake data\nconst books = [\n  {\n    title: \"Harry Potter and the Sorcerer's stone\",\n    author: 'J.K. Rowling',\n  },\n  {\n    title: 'Jurassic Park',\n    author: 'Michael Crichton',\n  },\n];\n\n// The GraphQL schema in string form\nconst typeDefs = `\n  type Query { books: [Book] }\n  type Book { title: String, author: String }\n`;\n\n// The resolvers\nconst resolvers = {\n  Query: { books: () => books },\n};\n\n// Put together a schema\nconst schema = makeExecutableSchema({\n  typeDefs,\n  resolvers,\n});\n\n// Initialize the app\nconst app = express();\n\n// The GraphQL endpoint\napp.use('/graphql', bodyParser.json(), graphqlExpress({ schema }));\n\n// GraphiQL, a visual editor for queries\napp.use('/graphiql', graphiqlExpress({ endpointURL: '/graphql' }));\n\n// Start the server\napp.listen(3000, () => {\n  console.log('Go to http://localhost:3000/graphiql to run queries!');\n});\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","module.exports = require(\"express\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"express\"\n// module id = 2\n// module chunks = 0","module.exports = require(\"body-parser\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"body-parser\"\n// module id = 3\n// module chunks = 0","module.exports = require(\"apollo-server-express\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"apollo-server-express\"\n// module id = 4\n// module chunks = 0","module.exports = require(\"graphql-tools\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"graphql-tools\"\n// module id = 5\n// module chunks = 0"],"sourceRoot":""}